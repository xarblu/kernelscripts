#!/usr/bin/env bash

### Basically a bootleg genkernel that allows to use the llvm toolchain instead of gcc
### requires BUILD_FIXES="LLVM=1" to be set for out-of-tree-modules
### out-of-tree-modules break when the kernel is build with lto unless the sandbox
### allows rw access to the .thinlto-cache and emerge runs with FEATURES="-userpriv"

### VARIABLES ###
# Internal Variables
VERSION="6.0"

# Default values for flags
USE_LLVM="0"
USE_CCACHE="0"
JOBS="$(nproc)"
EXTRA_MAKEOPTS=""
EXTRA_CPPFLAGS=""
EXTRA_AFLAGS=""
EXTRA_CFLAGS=""
EXTRA_RUSTFLAGS=""
VERBOSITY="0"
CLEAN="0"
CONFIG_TOOL=""

# User overwriteable VARS
CCACHE_WRAP_DIR="${CCACHE_WRAP_DIR:=/usr/lib/ccache/bin}"
LINUX_SRC_DIR="${LINUX_SRC_DIR:=/usr/src/linux}"

### FUNCTIONS ###
# Prompt the user to choose between 2 options optionally with a preselected default
# Usage: prompt_2_opts <option returning true> <option returning false> <default return for no input>
function prompt_2_opts() {
    local INPUT
    read INPUT
    case ${INPUT} in
        ${1})
            return 0
            ;;
        ${2})
            return 1
            ;;
        "")
            if [[ -n ${3} ]]; then
                return ${3}
            else
                echo -n -e "\e[1;34mTry again. [${1}/${2}]:\e[0m"
                prompt_2_opts ${1} ${2}
            fi
            ;;
        *)
            if [[ -z ${3} ]]; then
                echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [${1}/${2}]:\e[0m"
            elif [[ ${3} == 0 ]]; then
                echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;32m${1}\e[1;34m/\e[1;31m${2}\e[1;34m]:\e[0m"
            elif [[ ${3} == 1 ]]; then
                echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;31m${1}\e[1;34m/\e[1;32m${2}\e[1;34m]:\e[0m"
            fi
            unset INPUT
            prompt_2_opts ${1} ${2} ${3}
            ;;
    esac
}

# Set the terminal title to $1 for supported terminals
function set_title() {
    case ${TERM} in
        [aEkx]term*|rxvt*|gnome*|konsole*|alacritty|interix|tmux*)
            printf "\033]0;${1}\007"
            ;;
        screen*)
            printf "\[\033k${1}\033\\"
            ;;
    esac
}

# Check if all tools can be found and print which will be used
function check_tool_availability() {
    llvm_tools=( clang clang++ ld.lld llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-objdump llvm-readelf rustc )
    gnu_tools=( gcc g++ ld.bfd  ar nm strip objcopy objdump readelf rustc )

    if [[ ${USE_LLVM} == 1 ]]; then
        tools=( ${llvm_tools[*]} )
    else
        tools=( ${gnu_tools[*]} )
    fi

    echo -e "\e[1;34mTesting if all tools are available...\e[0m"
    for tool in ${tools[*]}; do
        if [[ -n $(command -v ${tool}) ]]; then
            echo -e "\e[1;34mUsing \e[1;36m${tool}\e[1;34m via \e[1;36m$(readlink --canonicalize $(command -v ${tool}))\e[1;34m!\e[0m"
        else
            echo -e "\e[1;34mTool \e[1;36m${tool}\e[1;34m not found! Aborting!\e[0m"
            exit 1
        fi
    done
    echo -e "\e[1;34mAll tools found!\e[0m"
}

function help_handler() {
    echo "kernelbuilder from kernelscripts version ${VERSION}"
    echo "Usage: kernelbuilder [options...]"
    echo "  --llvm               Use the LLVM toolchain to build the kernel"
    echo "  --ccache             Prepend ccache wrappers from \${CCACHE_WRAP_DIR}"
    echo "  --jobs <jobs>        Override the number of make jobs (default: \$(nproc))"
    echo "  --makeopts <opts>    Append extra makeopts"
    echo "  --cppflags <flags>   Append extra cppflags"
    echo "  --aflags <flags>     Append extra aflags"
    echo "  --cflags <flags>     Append extra cflags"
    echo "  --rustflags <flags>  Append extra rustflags"
    echo "  --config-tool <tool> Launch your preferred config tool before compiling anything"
    echo "  --clean              Run make clean"
    echo "  --mrproper           Run make mrproper"
    echo "  --verbose            Print verbose make output"
    echo "  --version            Print version information"
    echo "  -h,--help            Print this help message"
    echo ""
    echo "Environment Variables:"
    echo "  CCACHE_WRAP_DIR   Path to ccache wrappers (default: /usr/bin/ccache)"
    echo "  LINUX_SRC_DIR     Path to linux source (default: /usr/src/linux)"
}

function timer() {
    case $1 in
        reset)
            SECONDS=0
            ;;
        elapsed)
            local ELAPSED=${SECONDS}
            local HH=$(( ${ELAPSED} / 3600 )); ELAPSED=$(( ${ELAPSED} % 3600 ))
            local MM=$(( ${ELAPSED} / 60 )); ELAPSED=$(( ${ELAPSED} % 60 ))
            local SS=${ELAPSED}
            [[ ${HH} -lt 10 ]] && HH="0${HH}"
            [[ ${MM} -lt 10 ]] && MM="0${MM}"
            [[ ${SS} -lt 10 ]] && SS="0${SS}"
            echo -n "${HH}:${MM}:${SS}"
            ;;
    esac
}

function make_wrapper() {
    case ${VERBOSITY} in
        0)
            make V=0 "${MAKEPARAMS[@]}" "${@}"
            ;;
        1)
            make V=1 "${MAKEPARAMS[@]}" "${@}"
            ;;
    esac
}

# Handle CLI flags
while [[ $# -gt 0 ]]; do
    case ${1} in
        --llvm)
            USE_LLVM=1
            shift
            ;;
        --ccache)
            USE_CCACHE=1
            shift
            ;;
        --jobs)
            JOBS="${2}"
            if ! [[ ${JOBS} =~ ^[0-9]+$ ]]; then
                echo -e "\e[1;34m\e[1;36m${JOBS}\e[1;34m isn't a valid value for \e[1;36m--jobs <jobs>\e[1;34m.\e[0m"
                exit 1
            fi
            shift 2
            ;;
        --makeopts)
            EXTRA_MAKEOPTS="${2}"
            shift 2
            ;;
        --cppflags)
            EXTRA_CPPFLAGS="${2}"
            shift 2
            ;;
        --aflags)
            EXTRA_AFLAGS="${2}"
            shift 2
            ;;
        --cflags)
            EXTRA_CFLAGS="${2}"
            shift 2
            ;;
        --rustflags)
            EXTRA_RUSTFLAGS="${2}"
            shift 2
            ;;
        --config-tool)
            if [[ "${2}" =~ (n|menu|x|g)?config ]]; then
                CONFIG_TOOL="${2}"
            else
                echo -e "\e[1;34m\e[1;36m${2}\e[1;34m isn't a valid option for \e[1;36m${1}\e[1;34m.\e[0m"
                exit 1
            fi
            shift 2
            ;;
        --clean)
            CLEAN=1
            shift
            ;;
        --mrproper)
            CLEAN=2
            shift
            ;;
        --verbose)
            VERBOSITY=1
            shift
            ;;
        --version)
            echo "kernelbuilder version ${VERSION}"
            exit
            ;;
        -h|--help)
            help_handler
            exit
            ;;
        *)
            echo -e "\e[1;34m\e[1;36m${1}\e[1;34m isn't a valid option.\e[0m"
            echo -e "\e[1;34mSee \e[1;36m--help\e[1;34m for more info.\e[0m"
            exit 1
            ;;
    esac
done

# Check if root
if [[ ${EUID} != "0" ]]; then
    echo -e "\e[1;34mThis script needs root priviledges! Aborting!\e[0m"
    help_handler
    exit 1
fi

# Prepend ccache wrappers if enabled
if [[ ${USE_CCACHE} == 1 ]]; then
    if [[ -d ${CCACHE_WRAP_DIR} ]]; then
        PATH="${CCACHE_WRAP_DIR}:${PATH}"
    else 
        echo -e "\e[1;36m${CCACHE_WRAP_DIR}\e[1;34m does not exist!\e[0m"
    fi
fi

# Check for tools
check_tool_availability

# Build make parameters
declare -a MAKEPARAMS
[[ -n ${JOBS} ]] && MAKEPARAMS+=( -j${JOBS} )
[[ ${USE_LLVM} == 1 ]] && MAKEPARAMS+=( LLVM=1 )
[[ -n ${EXTRA_MAKEOPTS} ]] && MAKEPARAMS+=( ${EXTRA_MAKEOPTS} )
[[ -n ${EXTRA_CPPFLAGS} ]] && MAKEPARAMS+=( "KCPPFLAGS=${EXTRA_CPPFLAGS}" )
[[ -n ${EXTRA_AFLAGS} ]] && MAKEPARAMS+=( "KAFLAGS=${EXTRA_AFLAGS}\"" )
[[ -n ${EXTRA_CFLAGS} ]] && MAKEPARAMS+=( "KCFLAGS=${EXTRA_CFLAGS}" )
[[ -n ${EXTRA_RUSTFLAGS} ]] && MAKEPARAMS+=( "KRUSTFLAGS=${EXTRA_RUSTFLAGS}" )

# Print MAKEOPTS
echo -e "\e[1;36mmake\e[1;34m will use the following options:\e[0m"
echo -e "\e[1;36m${MAKEPARAMS[@]}\e[1;34m"

# Enter kernel directory
if [[ ! -d ${LINUX_SRC_DIR} ]]; then
    echo -e "\e[1;34mSource dir \e[1;36m${LINUX_SRC_DIR}\e[1;34m doesn't exist.\e[0m"
    exit 1
else
    pushd ${LINUX_SRC_DIR} > /dev/null
fi

# Clean ahead of time
if [[ ${CLEAN} == 1 ]]; then
    set_title "kernelbuilder: make clean"
    echo -e "\e[1;34mCleaning up old objects (make clean)!\e[0m"
    make_wrapper clean || exit 1
fi
if [[ ${CLEAN} == 2 ]]; then
    set_title "kernelbuilder: make mrproper"
    echo -e "\e[1;34mCleaning up old objects (make mrproper)!\e[0m"
    make_wrapper mrproper || exit 1
fi

# Handle different config situations
set_title "kernelbuilder: config"
if [[ -f .config ]]; then
    echo -n -e "\e[1;34mExisting config found! Reuse? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
    if prompt_2_opts y n 0; then
        make_wrapper oldconfig || exit 1
    else
        echo -n -e "\e[1;34mUse running kernel's config [1] or start fresh [2]? [1/2]: \e[0m"
        if prompt_2_opts 1 2; then
            if [[ -f /proc/config.gz ]]; then
                zcat /proc/config.gz > .config || exit 1
                make_wrapper oldconfig || exit 1
            else
                echo -e "\e[1;34mRunning kernel doesn't have /proc/config.gz!\e[0m"
                exit 1
            fi
        else
            rm .config
            make_wrapper prepare || exit 1
        fi
    fi
else
    echo -n -e "\e[1;34mNo existing config found! Use running kernel's config? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
    if prompt_2_opts y n 0; then
        zcat /proc/config.gz > .config || exit 1
        make_wrapper oldconfig || exit 1
    else
        echo -e "\e[1;34mNot reusing any config!\e[0m"
        make_wrapper prepare || exit 1
    fi
fi

# Optionally run config-tool
if [[ -n ${CONFIG_TOOL} ]]; then
    set_title "kernelbuilder: make ${CONFIG_TOOL}"
    echo -e "\e[1;34mRunning ${CONFIG_TOOL}!\e[0m"
    make_wrapper ${CONFIG_TOOL} || exit 1
fi

#Building the kernel
KERNEL_VER="$(make_wrapper kernelrelease)"
set_title "kernelbuilder: build"
echo -n -e "\e[1;34mStart building Linux Kernel \e[1;36m${KERNEL_VER}\e[1;34m? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
if ! prompt_2_opts y n 0; then
    exit 1
fi
echo -e "\e[1;34mBuilding the Kernel and Modules!\e[0m"
timer reset
make_wrapper all || exit 1
TIME_ELAPSED_BUILD="$(timer elapsed)"
echo -e "\e[1;34mInstalling Modules!\e[0m"
timer reset
make_wrapper modules_install || exit 1
echo -e "\e[1;34mInstalling bzImage and initrd!\e[0m"
make_wrapper install || exit 1
TIME_ELAPSED_INSTALL="$(timer elapsed)"
popd > /dev/null

#rebuild oot-modules on Gentoo
timer reset
if [[ -n $(command -v emerge) ]]; then
    set_title "kernelbuilder: module-rebuild"
    echo -e "\e[1;34mRebuilding out-of-tree modules!\e[0m"
    emerge --ask=n @module-rebuild || exit 1
fi
TIME_ELAPSED_POSTINST="$(timer elapsed)"

#Print some fancy stats cuz why not
echo -e "\e[1;34mSome kernelbuilder stats:\e[0m"
echo -e "\e[1;34mTime needed for:\e[0m"
echo -e "\e[1;34m-> Build:       \e[1;36m${TIME_ELAPSED_BUILD:-00:00:00}\e[0m"
echo -e "\e[1;34m-> Install:     \e[1;36m${TIME_ELAPSED_INSTALL:-00:00:00}\e[0m"
echo -e "\e[1;34m-> PostInstall: \e[1;36m${TIME_ELAPSED_POSTINST:-00:00:00}\e[0m"

#!/usr/bin/env bash

### Basically a bootleg genkernel that allows to use the llvm toolchain instead of gcc
### requires BUILD_FIXES="LLVM=1" to be set for out-of-tree-modules
### out-of-tree-modules break when the kernel is build with lto unless the sandbox
### allows rw access to the .thinlto-cache and emerge runs with FEATURES="-userpriv"

### VARIABLES ###
# Internal Variables
VERSION="1.1"

# Default values for flags
USE_LLVM="0"
USE_CCACHE="0"
JOBS="$(nproc)"
MENUCONFIG="0"

# User overwriteable VARS
CCACHE_WRAP_DIR="${CCACHE_WRAP_DIR:=/usr/lib/ccache/bin}"
LINUX_SRC_DIR="${LINUX_SRC_DIR:=/usr/src/linux}"

### FUNCTIONS ###
# Prompt the user to choose between 2 options optionally with a preselected default
# Usage: prompt_2_opts <option returning true> <option returning false> <default return for no input>
function prompt_2_opts() {
	local INPUT
	read INPUT
	case ${INPUT} in
		${1})
			return 0
			;;
		${2})
			return 1
			;;
		"")
			if [[ -n ${3} ]]; then
				return ${3}
			else
				echo -n -e "\e[1;34mTry again. [${1}/${2}]:\e[0m"
			fi
			;;
		*)
			if [[ -z ${3} ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [${1}/${2}]:\e[0m"
			elif [[ ${3} == 0 ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;32m${1}\e[1;34m/\e[1;31m${2}\e[1;34m]:\e[0m"
			elif [[ ${3} == 1 ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;31m${1}\e[1;34m/\e[1;32m${2}\e[1;34m]:\e[0m"
			fi
			unset INPUT
			prompt_2_opts ${1} ${2} ${3}
			;;
	esac
}

# Set the terminal title to $1 for supported terminals
function set_title() {
	case ${TERM} in
		[aEkx]term*|rxvt*|gnome*|konsole*|alacritty|interix|tmux*)
			printf "\033]0;${1}\007"
			;;
		screen*)
			printf "\[\033k${1}\033\\"
			;;
	esac
}

# Check if all tools can be found and print which will be used
function check_tool_availability() {
	llvm_tools=( clang clang++ ld.lld llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-objdump llvm-readelf )
	gnu_tools=( gcc g++ ld.bfd  ar nm strip objcopy objdump readelf )

	if [[ ${USE_LLVM} == 1 ]]; then
		tools=( ${llvm_tools[*]} )
	else
		tools=( ${gnu_tools[*]} )
	fi

	echo -e "\e[1;34mTesting if all tools are available...\e[0m"
	for tool in ${tools[*]}; do
		if [[ -n $(command -v ${tool}) ]]; then
			echo -e "\e[1;34mUsing \e[1;36m${tool}\e[1;34m via \e[1;36m$(readlink --canonicalize $(command -v ${tool}))\e[1;34m!\e[0m"
		else
			echo -e "\e[1;34mTool \e[1;36m${tool}\e[1;34m not found! Aborting!\e[0m"
			exit 1
		fi
	done
	echo -e "\e[1;34mAll tools found!\e[0m"
}

function help_handler() {
	echo "kernelbuilder from kernelscripts version ${VERSION}"
	echo "Usage: kernelbuilder [options...]"
	echo "  --llvm            Use the LLVM toolchain to build the kernel"
	echo "  --ccache          Prepend ccache wrappers from \${CCACHE_WRAP_DIR}"
	echo "  --jobs=<jobs>     Override the number of make jobs"
	echo "  --menuconfig      Launch menuconfig before compiling anything"
	echo "  -h,--help         Print this help message"
	echo ""
	echo "Environment Variables:"
	echo "  CCACHE_WRAP_DIR   Path to ccache wrappers (default: /usr/bin/ccache)"
	echo "  LINUX_SRC_DIR     Path to linux source (default: /usr/src/linux)"
}

# Handle CLI flags
for flag in ${@}; do
	case ${flag} in
		--llvm)
			USE_LLVM=1
			;;
		--ccache)
			USE_CCACHE=1
			;;
		--jobs=*)
			JOBS="${flag##--jobs=}"
			if ! [[ ${JOBS} =~ ^[0-9]+$ ]]; then
				echo -e "\e[1;34m\e[1;36m${JOBS}\e[1;34m isn't a valid value for \e[1;36m--jobs=<jobs>\e[1;34m.\e[0m"
				exit 1
			fi
			;;
		--menuconfig)
			MENUCONFIG=1
			;;
		-h|--help)
			help_handler
			exit
			;;
		*)
			echo -e "\e[1;34m\e[1;36m${flag}\e[1;34m isn't a valid option.\e[0m"
			echo -e "\e[1;34mSee \e[1;36m--help\e[1;34m for more info.\e[0m"
			exit 1
			;;
	esac
done

# Check if root
if [[ ${EUID} != "0" ]]; then
	echo -e "\e[1;34mThis script needs root priviledges! Aborting!\e[0m"
	help_handler
	exit 1
fi

# Prepend ccache wrappers if enabled
if [[ ${USE_CCACHE} == 1 ]]; then
	if [[ -d ${CCACHE_WRAP_DIR} ]]; then
		PATH="${CCACHE_WRAP_DIR}:${PATH}"
	else 
		echo -e "\e[1;36m${CCACHE_WRAP_DIR}\e[1;34m does not exist!\e[0m"
	fi
fi

# Check for tools
check_tool_availability

# Build make parameters
declare -a MAKEPARAMS
if [[ ${USE_LLVM} == 1 ]]; then
	MAKEPARAMS=( ${MAKEPARAMS[*]} LLVM=1 )
fi
if [[ -n ${JOBS} ]]; then
	MAKEPARAMS=( ${MAKEPARAMS[*]} -j${JOBS} )
fi

# Enter kernel directory
if [[ ! -d ${LINUX_SRC_DIR} ]]; then
	echo -e "\e[1;34mSource dir \e[1;36m${LINUX_SRC_DIR}\e[1;34m doesn't exist.\e[0m"
	exit 1
else
	pushd ${LINUX_SRC_DIR} > /dev/null
fi

# Clean ahead of time
set_title "kernelbuilder: make clean"
echo -e "\e[1;34mCleaning up old objects!\e[0m"
make ${MAKEPARAMS[*]} clean || exit 1

# Handle different config situations
set_title "kernelbuilder: config"
if [[ -f .config ]]; then
	echo -n -e "\e[1;34mExisting config found! Reuse? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
	if prompt_2_opts y n 0; then
		make ${MAKEPARAMS[*]} oldconfig || exit 1
	else
		echo -n -e "\e[1;34mUse running kernel's config [1] or start fresh [2]? [1/2]: \e[0m"
		if prompt_2_opts 1 2; then
			if [[ -f /proc/config.gz ]]; then
				zcat /proc/config.gz > .config || exit 1
				make ${MAKEPARAMS[*]} oldconfig || exit 1
			else
				echo -e "\e[1;34mRunning kernel doesn't have /proc/config.gz!\e[0m"
				exit 1
			fi
		else
			rm .config
			make ${MAKEPARAMS[*]} prepare || exit 1
		fi
	fi

else
	echo -n -e "\e[1;34mNo existing config found! Use running kernel's config? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
	if prompt_2_opts y n 0; then
		zcat /proc/config.gz > .config || exit 1
		make ${MAKEPARAMS[*]} oldconfig || exit 1
	else
		echo -e "\e[1;34mNot reusing any config!\e[0m"
		make ${MAKEPARAMS[*]} prepare || exit 1
	fi
fi

# Optionally run menuconfig
if [[ ${MENUCONFIG} == 1 ]]; then
	set_title "kernelbuilder: make menuconfig"
	echo -e "\e[1;34mRunning menuconfig!\e[0m"
	make ${MAKEPARAMS[*]} menuconfig || exit 1
fi

#Building the kernel
KERNEL_VER="$(make ${MAKEPARAMS[*]} kernelrelease)"
set_title "kernelbuilder: build"
echo -n -e "\e[1;34mStart building Linux Kernel \e[1;36m${KERNEL_VER}\e[1;34m? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
if ! prompt_2_opts y n 0; then
	exit 1
fi
echo -e "\e[1;34mBuilding the Kernel and Modules!\e[0m"
make ${MAKEPARAMS[*]} all || exit 1
echo -e "\e[1;34mInstalling Modules!\e[0m"
make ${MAKEPARAMS[*]} modules_install || exit 1
echo -e "\e[1;34mInstalling bzImage and initrd!\e[0m"
make ${MAKEPARAMS[*]} install || exit 1
popd > /dev/null

#rebuild oot-modules on Gentoo
if [[ -n $(command -v emerge) ]]; then
	set_title "kernelbuilder: module-rebuild"
	echo -e "\e[1;34mRebuilding out-of-tree modules!\e[0m"
	emerge --ask=n --jobs=1 @module-rebuild || exit 1
fi

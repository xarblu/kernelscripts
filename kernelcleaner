#!/usr/bin/env bash

### VARIABLES ###
# Internal Variables
VERSION="5.0"

### FUNCTIONS ###
# Prompt the user to choose between 2 options optionally with a preselected default
# Usage: prompt_2_opts <option returning true> <option returning false> <default return for no input>
function prompt_2_opts() {
	local INPUT
	read INPUT
	case ${INPUT} in
		${1})
			return 0
			;;
		${2})
			return 1
			;;
		"")
			if [[ -n ${3} ]]; then
				return ${3}
			else
				echo -n -e "\e[1;34mTry again. [${1}/${2}]:\e[0m"
				prompt_2_opts ${1} ${2}
			fi
			;;
		*)
			if [[ -z ${3} ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [${1}/${2}]:\e[0m"
			elif [[ ${3} == 0 ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;32m${1}\e[1;34m/\e[1;31m${2}\e[1;34m]:\e[0m"
			elif [[ ${3} == 1 ]]; then
				echo -n -e "\e[1;34m\e[1;36m${INPUT}\e[1;34m isn't valid. Try again. [\e[1;31m${1}\e[1;34m/\e[1;32m${2}\e[1;34m]:\e[0m"
			fi
			unset INPUT
			prompt_2_opts ${1} ${2} ${3}
			;;
	esac
}

# Set the terminal title to $1 for supported terminals
function set_title() {
	case ${TERM} in
		[aEkx]term*|rxvt*|gnome*|konsole*|alacritty|interix|tmux*)
			printf "\033]0;${1}\007"
			;;
		screen*)
			printf "\[\033k${1}\033\\"
			;;
	esac
}

function help_handler() {
	echo "kernelcleaner from kernelscripts version ${VERSION}"
	echo "Usage: kernelcleaner [options...]"
	echo "  -h,--help         Print this help message"
}

# Handle CLI flags
for flag in ${@}; do
	case ${flag} in
		-h|--help)
			help_handler
			exit
			;;
		*)
			echo -e "\e[1;34m\e[1;36m${flag}\e[1;34m isn't a valid option.\e[0m"
			echo -e "\e[1;34mSee \e[1;36m--help\e[1;34m for more info.\e[0m"
			exit 1
			;;
	esac
done

# Check if root
if [[ ${EUID} != "0" ]]; then
	echo -e "\e[1;34mThis script needs root priviledges! Aborting!\e[0m"
	help_handler
	exit
fi

# Remove kernels with systemd's kernel-install if available
if [[ -n $(command -v kernel-install) ]]; then
	set_title "kernelcleaner: kernel-install remove"
	echo -e "\e[1;34mUsing systemd's kernel-install to remove kernels!\e[0m"
	# Get a list of installed kernels
	read MACHINE_ID < /etc/machine-id
	if [[ -n "$MACHINE_ID" ]]; then
	    kernels=( "/boot/$MACHINE_ID"/[0-9]* )
	fi
	kernels=( ${kernels[*]##*/} )
	# Ask for removal on each
	for kernel in ${kernels[*]}; do
		echo -n -e "\e[1;34mRemove \e[1;36m${kernel}\e[1;34m? [\e[1;31my\e[1;34m/\e[1;32mn\e[1;34m]: \e[0m"
		if prompt_2_opts y n 1; then
			echo -e "\e[1;34mRemoving \e[1;36m${kernel}\e[1;34m!\e[0m"
			kernel-install remove ${kernel}
			moddir="/lib/modules/${kernel}"
			if [[ -d ${moddir} ]]; then
				echo -n -e "\e[1;34mAlso remove \e[1;36m${moddir}\e[1;34m? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
				if prompt_2_opts y n 0; then
					rm -v -r ${moddir}
				fi
			fi
			srcdir="$(grep -I -H ${kernel} /usr/src/linux-*/include/config/kernel.release 2>/dev/null)"
			srcdir="${srcdir%%/include*}"
			if [[ -d ${srcdir} ]]; then
				echo -n -e "\e[1;34mAlso remove \e[1;36m${srcdir}\e[1;34m? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
				if prompt_2_opts y n 0; then
					rm -v -r ${srcdir}
				fi
			fi
		else
			echo -e "\e[1;34mSkipping \e[1;36m${kernel}\e[1;34m!\e[0m"
		fi
	done
fi

# Run eclean kernel to remove some potentially leftover files
if [[ -n $(command -v eclean-kernel) ]]; then
	set_title "kernelcleaner: eclean-kernel"
	echo -n -e "\e[1;34mRun eclean-kernel? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
	if  prompt_2_opts y n 0; then
		eclean-kernel --no-kernel-install
	fi
fi

# Run grub-mkconfig
if [[ -n $(command -v grub-mkconfig) ]]; then
	set_title "kernelcleaner: grub-mkconfig"
 	echo -n -e "\e[1;34mRun grub-mkconfig? [\e[1;32my\e[1;34m/\e[1;31mn\e[1;34m]: \e[0m"
	if  prompt_2_opts y n 0; then
		grub-mkconfig -o /boot/grub/grub.cfg
	fi
fi
